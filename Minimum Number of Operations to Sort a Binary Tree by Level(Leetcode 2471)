class Solution {
    public int swaps(int[] nums) {
        int ans = 0;
        int[] arr = nums.clone();
        Arrays.sort(arr);
        Map<Integer, Integer> mpp = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            mpp.put(nums[i], i);
        }
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] != arr[i]) {
                ans++;
                int pos = mpp.get(arr[i]);
                mpp.put(nums[i], pos);
                nums[pos] = nums[i];
            }
        }
        return ans;
    }
    
    public int minimumOperations(TreeNode root) {
        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);
        int ans = 0;
        while (!q.isEmpty()) {
            int n = q.size();
            int[] arr = new int[n];
            for (int i = 0; i < n; i++) {
                TreeNode node = q.poll();
                arr[i] = node.val;

                if (node.left != null) 
                    q.add(node.left);
                if (node.right != null)
                    q.add(node.right);
            }
            ans += swaps(arr);
        }
        return ans;
    }
}
